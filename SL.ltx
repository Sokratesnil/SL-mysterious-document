\documentclass[a4paper，10pt]{ltjsarticle}
\usepackage{mysettings}
\title{分離論理入門のようなもの}
\author{そくらてす}
\date{\today 更新}

\begin{document}
\maketitle

 \section{分離論理とは}

 分離論理(Separation Logic)とは述語論理をヒープ領域(平たく言えば"メモリ")に言及
できるように拡張した論理体系である.

 形式的には通常の述語論理(一階述語論理など)にメモリの状態を記述できるような述語記号
とそれらを結合するための分離結合子\(*\)などを付け加えたものと捉えられる.

 プログラム検証の文脈で捉えると，分離論理は「ほど良い抽象性」を持ったヒープの状態の記法
と言うことも出来る
\footnote{応用上重要視されているSymbolic Heap と呼ばれる分離論
理の部分体系は，通常使われるようなメモリの使い方をある程度カバーしつつ恒真性が
決定可能になる体系である．
執筆時間の都合でSymbolic Heap についてこの文書ではこれ以上詳しく扱わない}.

 この文書は一階述語論理の完全性定理くらいの内容を理解していて，かつ
C言語のポインタ概念を知っている人に対して，分離論理のさわりを解説するためのものである.
読者の参考になれば幸いである．

 \section{分離論理の言語とその意味論}
 この節では，分離論理の言語とその意味論を定義する．
 
 今回の言語は分離論理の基礎概念の理解のために必要な部分だけを取り出したものである．
 
 %言語の定義
 
  \begin{definition}[分離論理の言語]
   分離論理の言語を次のように定義する
   \footnote{この記法に慣れていない場合は「BNF記法」でぐぐれ．}．
   \begin{align*}
    &\text{Variables(変数記号)}  &x &\in \mathVar \\
    &\text{Terms(項)}  &t &::= \mathvalnil \mathrelbar x \\
    &\text{Atomic Formulas(原子論理式)}  &\alpha &::= \mathemp \mathrelbar  t = t  \mathrelbar t \mathpointer{1} \left\langle t  \right\rangle \mathrelbar  t \mathpointer{2} \left\langle t{,}\ t  \right\rangle \mathrelbar\mathprls{t}{t} \mathrelbar \mathprtree{t}  \\
    &\text{Formulas(論理式)}  &\varphi &::= \alpha \mathrelbar \lnot \varphi \mathrelbar \varphi \land \varphi \mathrelbar \exists x.\varphi \mathrelbar \varphi * \varphi \mathrelbar \varphi \mathmagicwand \varphi \\
   \end{align*}
  \end{definition} 

  ヒープ領域を表す記号が増えている以外は一階述語論理とほぼ同様である．
  $\mathpointer{i}$ はポインタを表現する述語記号である．
  また，$\mathprls{\mathdash}{\mathdash}，\mathprtree{\mathdash}$はリスト構造の存在と
  二分木構造の存在を表す述語記号である．

  一階述語論理との最大の違いは分離結合子(separating conjunction)$*$と
  魔法の杖(magic wand またはseparating implication)
  $\mathmagicwand$である．
  分離結合子は異なるヒープ領域の状態の結合を表している．
  また，魔法の杖は前件部に書かれたヒープ領域の状態を結合すると後件が
  成り立つことを表している
  \footnote{ここで書かれた直感的な意味を読んで理解できなくても心配することはない．
  私自身，分離論理の勉強を始めたばかりの頃に，
  このように説明をされても正直よくわからなかった．
  分離論理の解釈の定義を読んだ後に戻って読むと意味がわかると思う．}．

次に分離論理の意味論を定義する．

 まず，一階述語論理の構造(structure)と値割り当て(valuation)にあたるものを
 定義する．

 \begin{definition}[ヒープ領域モデル(Heap Memory Model)] 
  次の条件を満たす4つ組$\left(\mathVal{,}\ \mathLoc{,}\ s{,}\ h \right)$を
  分離論理の構造と呼ぶ．
  \begin{itemize}
   \item $\mathVal$，$\mathLoc$ は空でない集合.
   %\item $\mathLoc \subset \mathVal$．
   \item $ nil \in \mathVal \setminus \mathLoc$.
   \item $s:\mathVar \to \mathVal $.
   \item $h:\mathLoc \mathfinparmap \mathVal \cup \mathVal^2$.
  \end{itemize}
 \end{definition} 
 
 $\mathVal$ は変数記号の取り得る範囲を表す．
 $\mathLoc$はヒープ領域の番地(Adress)の集合である．
 $s$は変数記号に対する値の割り当てである．
 $h$はヒープ領域を表す有限部分関数である．

 本文書では$\mathVal$や$\mathLoc$が具体的にどのような集合であるかは
 特に問題にはならない
 \footnote{むしろ，$\mathVal$や$\mathLoc$の具体的な中身が
 問題となる場面をわたしは知らない．}．
 ここ以降では
 \begin{align*}
  \mathLoc &:= \mathbb{Z}^{+} \\
  \mathVal &:= \mathbb{Z} \cup \left\{ nil \right\}
 \end{align*} 
 と思っておけばよい
 (ただし，$\mathbb{Z}$は整数全体の集合，
 $\mathbb{Z}^{+}$は正の整数全体の集合)．

 さて，分離論理の論理式の解釈を定義する.
 そのためにいくつかの略記を導入する.

 $s:\mathVar \to \mathVal $に対して， 
 \[
  s\left[x \mapsto v\right]\mleft(y\mright)=
   \begin{cases}
    s\mleft(y\mright) &  \text{if $y \neq x$}\\
    v &  \text{if $y=x$}
   \end{cases}
 \]
 と定める．

  $h_1$，$h_2:\mathLoc \mathfinparmap \mathVal \cup \mathVal^2$に対して$h_1 \perp h_2$とは，
  $\mathdom{h_1} \cap \mathdom{h_2} = \emptyset$を意味する．

  また，$h_1 \perp h_2$に対して
  \[
   h_1 * h_2 \mleft(x\mright)=
   \begin{cases}
    h_1\mleft(x\mright) &  \text{if $x \in \mathdom{h_1}$}\\
    h_2\mleft(x\mright) &  \text{if $x \in \mathdom{h_2}$}
   \end{cases}
  \]
  と定義する.

 \begin{definition}[分離論理の論理式の解釈]
  構造 $\left(\mathVal，\mathLoc，s，h \right)$， 
  論理式$\varphi$ について， 
  \[s{,}\ h \models \varphi\]
  という関係を次のように帰納的に定める.

  以下 
  $\mathLdoubleko x \mathRdoubleko_{s} = s\left( x \right)$，
  $\mathLdoubleko \mathsf{nil} \mathRdoubleko_{s} = \mathvalnil$
  とする.

  
 
 \begin{align*}
  s{,}\ h \models t_1 = t_2 
  & \mathdefiffarrow  
  \mathLdoubleko t_1 \mathRdoubleko_{s} = \mathLdoubleko t_2 \mathRdoubleko _{s} 
  & \text{(if $\varphi \equiv t_1 =t_2$)}\\
  s{,}\ h \models \lnot \psi 
  & \mathdefiffarrow s{,}\ h \not \models \varphi 
  & \text{(if $\varphi \equiv  \lnot \psi$)} \\
  s{,}\ h \models \psi\land\vartheta 
  & \mathdefiffarrow s{,}\ h \models \psi \text{ and }  
  s{,}\ h \models \vartheta  & \text{(if $\varphi \equiv \psi\land\vartheta$)} \\
  s{,}\ h \models \exists x.\psi & \mathdefiffarrow 
  \text{There exists $v \in \mathVal$ such that  } 
  s\left[\mathsf{x} \mapsto v\right]{,}\ h \models \psi  & \text{(if $\varphi \equiv \exists x.\psi$)} \\
%%%%%%
  s{,}\ h \models \mathemp & \mathdefiffarrow \mathdom{h} = \emptyset  & \text{(if $\varphi \equiv \mathemp$)}\\
  s{,}\ h \models t_0 \mathpointer{1} \left\langle t_1 \right\rangle & \mathdefiffarrow \mathdom{h} = \left\{ \mathLdoubleko t_0 \mathRdoubleko _{s}  \right\}{,}\ \mathop{h}\left(\mathLdoubleko t_0 \mathRdoubleko _{s}\right) = \mathLdoubleko t_1 \mathRdoubleko _{s} & \text{(if $\varphi \equiv t_0 \mathpointer{1} \left\langle t_1 \right\rangle $)} \\
  s{,}\ h \models t_0 \mathpointer{2} \left\langle t_1 {,}\ t_2 \right\rangle & \mathdefiffarrow \mathdom{h} = \left\{ \mathLdoubleko t_0 \mathRdoubleko _{s}  \right\}{,}\ \mathop{h}\left( \mathLdoubleko t_0 \mathRdoubleko _{s} \right)  = \left(\mathLdoubleko t_1 \mathRdoubleko _{s}{,}\ \mathLdoubleko t_2 \mathRdoubleko _{s}\right) & \text{(if $\varphi \equiv t_0 \mathpointer{2} \left\langle t_1{,}\ t_2 \right\rangle $)}\\
%%%%%%
  s{,}\ h \models \psi * \vartheta & \mathdefiffarrow \text{There exists } h_1 \perp h_2 \text{ where } h = h_1 * h_2{,}\ &  \\
  & \phantom{{}\mathdefiffarrow{}}
  s{,}\ h_1 \models \psi \text{ and }
  s{,}\ h_2 \models \vartheta & \text{(if $\varphi \equiv \psi * \vartheta$)} \\ 
  s{,}\ h \models \psi \mathmagicwand \vartheta & \mathdefiffarrow   
  s{,}\ h'  \models \psi \text{ implies } s{,}\ h * h' \models \vartheta \text{ for all } h' \perp h &\text{(if $\varphi \equiv \psi \mathmagicwand \vartheta$)} \\
%%%%%%
  s{,}\ h \models \mathprls{t_1}{t_2} 
  &\mathdefiffarrow 
  s{,}\ h \models \mathemp \text{ or there esists $v \in \mathVal$ such that } & \\
  & \phantom{{}\mathdefiffarrow{}} s\left[x \mapsto v\right]，h \models t_1 \mathpointer{1} \left\langle x \right\rangle * \mathprls{x}{t_2} \text{ where $x$ is fresh} &\text{(if $\varphi \equiv \mathprls{t_1}{t_2} $)}\\
%%%%%%
  s{,}\ h \models \mathprtree{t_1} 
  &\mathdefiffarrow 
  s{,}\ h \models \mathemp 
  \text{ or there esists $v_1$，$v_2 \in \mathVal$ such that } & \\
  & \phantom{{}\mathdefiffarrow{}} s\left[x \mapsto v_1{,}\ y \mapsto v_2 \right]{,}\ h \models t_1 \mathpointer{2} \left\langle x {,}\ y \right\rangle * \mathprtree{x} * \mathprtree{y} &\\
  & \phantom{{}\mathdefiffarrow{}} \text{ where $x$，$y$ are fresh} & \text{(if $\varphi \equiv \mathprtree{t_1} $)}
 \end{align*}
 \end{definition}

 分離論理の論理式の解釈のうち，
 最初の4つは一階述語論理の論理式の解釈と同様である．

 $s，h \models \mathemp$ の定義は$\mathemp$がヒープ領域のすべてのノードが
 空であるということに対応していることを表している．

 若干誤解が起きそうなのが，
 $s{,}\ h \models t_0 \mathpointer{1} \left\langle t_1 \right\rangle$ 
 と 
$s{,}\ h \models t_0 \mathpointer{2} \left\langle t_1{,}\ t_2 \right\rangle$ 
の定義である．
この定義では，
$t_0 \mathpointer{1} \left\langle t_1 \right\rangle$ 
の意味は``Adress $\mathLdoubleko t_0 \mathRdoubleko _{s}$に
\emph{だけ}値が入っており，
その値が$\mathLdoubleko t_1 \mathRdoubleko _{s}$である''
と言っている．
$s{,}\ h \models t_0 \mathpointer{2} \left\langle t_1{,}\ t_2 \right\rangle$ 
についても同様である．

一階述語論理における$P\left(\mathvect{c}\right)$の解釈の定義が
``$P$の表現する集合に$\mathvect{c}$が表しているモノが属している''というもので
あることに比べると，\emph{だけ} という解釈の定義のおかげで分離論理のメモリに対する
表現力は格段に強くなっている．
では，
$\mathdom{h} \supset \left\{ \mathLdoubleko t_0 \mathRdoubleko _{s}  \right\}$，
$\mathop{h}\left(\mathLdoubleko t_0 \mathRdoubleko _{s}\right) = \mathLdoubleko t_1 \mathRdoubleko _{s}$ 
という状況は表現できるのだろうか? 
少し考えればわかるが$\lor，\lnot，\exists$などを組合せるだけでは
そのような状況は表現できない\footnote{はず．少なくとも私は思い付かなかった．}．
その鍵は分離結合子$*$が握っている.

$s{,}\ h \models \psi * \vartheta$ の定義は，
ヒープ領域が$\psi$で表現できる部分と$\vartheta$で表現できる部分に
``分離''できることを表している．
これを使うと 
$\mathdom{h} \supset \left\{ \mathLdoubleko t_0 \mathRdoubleko _{s}  \right\}{,}\ \mathop{h}\left(\mathLdoubleko t_0 \mathRdoubleko _{s}\right) = \mathLdoubleko t_1 \mathRdoubleko _{s}$は$t_0 \mathpointer{1} \left\langle t_1 \right\rangle * \mathrm{True}$
で表現ができる(ただし，$\mathrm{True}$は恒真な式).

$s{,}\ h \models \psi \mathmagicwand \vartheta$ 
の定義をみるだけでは$\mathmagicwand$ の存在意義が分からないと思う．
この$\mathmagicwand$ の意義はentailment 
$\varphi * \psi \vdash \vartheta $を考えることで分かる．

$\varphi \vdash \psi$という記号列をentailment という
(ただし$\varphi$，$\psi$は分離論理の論理式である)．
任意の分離論理の構造に対して``$s{,}\ h \models \varphi$ ならば 
$s{,}\ h \models \psi$''が成り立つとき，
entailment $\varphi \vdash \psi$ は真であるという．

さて，$\varphi * \psi \vdash \vartheta $が真であるとき，
$\varphi \vdash \psi \mathmagicwand \vartheta $は真であり，
またその逆も成り立つ(要証明)．このことをふまえると$\mathmagicwand$ は$*$の
``双対''と捉えることができる．

最後に$\mathprls{\mathdash}{\mathchar`-}$
と$\mathprtree{\mathdash}$は
それぞれヒープ領域におけるリスト構造の存在と二分木構造の存在を表す述語である．
$\mathprls{\mathdash}{\mathchar`-}$は第一引数で始まり，
第二引数で終わるようなリストが存在することを帰納的に定義している
\footnote{もしかすると，人によってはこの定義に違和感を持つかもしれない．
$nil$で終わるもののみを``リスト''とする定義に慣れている方である．
これは，たとえば「$x_1$から始まり，途中で$x_2$が出現し，最後に$nil$で終わる」
というようなリストを表現したいときがある．このとき，ここでの定義を採用しておくと
$\mathprls{x_1}{x_2}*\mathprls{x_2}{\mathvalnil}$とそのリストを
表現することができる．}．
同様に$\mathprtree{\mathdash}$は引数から始まる二分木構造の存在を示している．

 \section{分離論理の簡単な応用}
 この節では分離論理の簡単な応用として，簡単なプログラムの部分正当性を証明する．
 論理的にガチガチに固めて議論するとかえって分かりにくくなると思うので，
 ここから先はかなりラフに議論をしていく．

 \subsection{正しいプログラムとは}

 \textgtemph{正しいプログラム}とは何かということを考えよう． 

 プログラムを実際に書く時に必ず「仕様」というものを何らかの形で決める．
 \textgtemph{仕様}とは「そのプログラムにどのようなことをして欲しいか」を何かの形で
 決めたものである．
 プログラムが正しいというからには仕様を満たしていることが必要である
 \footnote{プログラムの仕様がそのプログラムの要件を満たしているか
 どうかという難しい問題もあるが，ここでは考えない．}.
 また, 何か変な入力をしたときにプログラムが永遠に走り続けて出力をしないというのも
 困る．

 それをふまえて，次の条件を満たすものをこの文書では
 「正しいプログラム」と呼ぶことにする．
 
 \begin{itemize}
  \item プログラムが停止するとき，想定している計算結果を返す(部分正当性)
 	\begin{itemize}
 	 \item 別の言い方をすると仕様書の通りに動く
	       \footnote{わかる人向け:もはや修正が不可能なほど書いてから気が付いてしまったのだが、メモリ安全性は部分正当性に入れてしまって良かったのだろうか......?}
 	\end{itemize}
  \item いかなる入力に対しても停止する(停止性)
 	\begin{itemize}
 	 \item 入力によっては答えを返さずに永遠動き続けるということがない
 	\end{itemize}
 \end{itemize}

 書いたプログラムが正しいかどうかを確かめたいとき，
 普通はいくつかの想定される入力を実際に入力してみて想定される答えを返すかどうか，
 長い時間動きつづけないかどうかを試してみる．
 想定される入力の種類がそれほど多くなければ，
 すべてのパターンを試すこともできるだろうが，
 普通は人間の寿命の間ですべての入力を確かめられることはマレである．
 無限に思えるような膨大な入力に対しても``想定されている答え''を返してくれることを
 保証するにはどうすれば良いのか? 
 人類の持っている武器で適切なものが一つある．数学である．

 数学は主に無限(や有限ではあるが人類には無限に
 感じられるようなもの)を扱う学問な
 うえ，この世で最も「正しい」学問である
 \footnote{この一文だけでいろんな人に刺されそう．}．
 このように書かれたプログラムが「正しい」ことを
 数学的に保証しようとすることを
 \textgtemph{プログラム検証}と呼ぶ．
 
 数学にプログラムが「正しい」ことを
 保証(証明)してもらえれば
 世は事もなしである．
 しかも，数理論理学の知見では数学の証明は
 記号列の変形と見做せるので
 \footnote{ホンマか?}，
 その証明自体もプログラムで自動化できてしまえば
 万々歳で，人類はバグという二字をこの世から
 亡くすことができ，平和が訪れる．

 だが，停止性については一般的に判定をするための
 アルゴリズムがない，つまりプログラムによる自動化ができないことが知られている
 (停止性の決定不能性)
 \footnote{この概念はすごく誤解を招くことでも有名である．
 正直わたしも正しく理解できているか不安である．}．
 そのため，与えられたプログラムが「正しいプログラム」
 であるかどうかを判定することは一般的にはできない．

 このことは，非常に残念なことである．
 が，停止性の決定不能性の意味するところが
 「どんなプログラムに対してもその停止性を保証できない」
 ということ
 \textgtemph{ではない}ということに注意すると，
 次善の策として「自動化出来る範囲で停止性を保証する」
 という方向性を見出すことができる．
 この試みはとても大事なものであるが，
 この文書ではこれ以上扱わない．
 
 ここ以降では「停止性」のことは忘れて，
 一番目の「部分正当性」の保証について考える．
 分離論理が活躍するのはこちらサイドの問題を
 考えるときである．

 「部分正当性」の問題を扱うにあたって重要な役割りを
 果たす道具のひとつがHoare Triple である．

\begin{definition}[Hoare Triple]
 $P，Q$を(何らかの論理体系の)論理式，
 $C$ を(何かしらのプログラム言語で書かれた)
 プログラムとする．記号列
\[ \left\{P\right\} C \left\{Q\right\} \]
 をHoare Triple と言い，
 P をこのHoare Triple の事前条件(precondition)，
 Qを事後条件(postcondition)という．
\end{definition}

気持ちとしては，
「$P$という条件が成り立っているときに
プログラム$C$を動かしたら$Q$が成り立つようになる」
というのがHoare Triple の意味するところである．
このHoare Triple が成立するかどうかを考える，つまり
``Hoare Triple の証明を考える''ことでプログラムが
部分正当性を検証するアプローチがある．

このHoare Triple の事前条件と事後条件が
分離論理の論理式で書かれたものを使った
プログラム検証の例を見せる. 
  
  \subsection{死ぬほど単純なプログラム検証の例}
  本来であれば、検証するためのプログラムの定義を
  書かなければならない所だが、
  そこまでやるのはしんどいのでC言語風の疑似コード
  で書かれた関数についてプログラム検証（のようなもの）
  を行ってみせ雰囲気を伝えることにする。

  次のような関数$\mathprogramsy{dells(*x)}$
  について考える。
  \begin{align*}
    % &  \{\objsym{tree} \left( x \right)\}}\\
    & \mathprogramsy{dells(*x)} \{  \\
      &\quad \mathprogramsy{if\left(*x=NULL\right)\ return\ 0;} % \onslide<2->{\structure{\{\objsym{emp}\}}}
   \\
      &\quad   \mathprogramsy{else \{}  % \onslide<3->{\structure{\{ \mathprogramsy{x} \mapsto \left(y, z\right) * \objsym{tree}\left(y\right) * \objsym{tree} \left(z\right)\}}}
   \\
      &\qquad  \mathprogramsy{n := x.next;}  % \onslide<4->{\structure{\{ \mathprogramsy{x} \mapsto \left(\mathprogramsy{l}, \mathprogramsy{r}\right) * \objsym{tree} \left( \mathprogramsy{l} \right) * \objsym{tree} \left( \mathprogramsy{r} \right)\}}} 
   \\
      &\qquad  \mathprogramsy{dells(n);}  % \onslide<5->{\structure{\{ \mathprogramsy{x} \mapsto \left(\mathprogramsy{l}, \mathprogramsy{r}\right) * \objsym{emp} * \objsym{tree}\left( \mathprogramsy{r} \right)\} }}
   \\
      &\qquad  \mathprogramsy{free(x);}   % \onslide<7->{\structure{\{\objsym{emp} * \objsym{emp} * \objsym{emp}\}}}
   \\
      &\quad \mathprogramsy{\}} % \onslide<8->{\structure{\{\objsym{emp}\}}}
   \\
      &\mathprogramsy{\}} % \alert{\{\objsym{emp}\}}
  \end{align*}

  これは$\mathprogramsy{x}$から始まるリストを削除する
  関数である。
  このことをHoare Triple を使って表すと次のようになる。

    \begin{align*}
     &  \left\{\mathprls{x}{\mathvalnil}\right\}\\
     & \mathprogramsy{dells(*x)} \{  \\
     &\quad \mathprogramsy{if\left(*x = NULL\right)\ return\ 0;} % \onslide<2->{\structure{\{\objsym{emp}\}}}
   \\
     &\quad   \mathprogramsy{else \{}  % \onslide<3->{\structure{\{ \mathprogramsy{x} \mapsto \left(y, z\right) * \objsym{tree}\left(y\right) * \objsym{tree} \left(z\right)\}}}
   \\
     &\qquad  \mathprogramsy{n := x.next;}  % \onslide<4->{\structure{\{ \mathprogramsy{x} \mapsto \left(\mathprogramsy{l}, \mathprogramsy{r}\right) * \objsym{tree} \left( \mathprogramsy{l} \right) * \objsym{tree} \left( \mathprogramsy{r} \right)\}}} 
   \\
     &\qquad  \mathprogramsy{dells(n);}  % \onslide<5->{\structure{\{ \mathprogramsy{x} \mapsto \left(\mathprogramsy{l}, \mathprogramsy{r}\right) * \objsym{emp} * \objsym{tree}\left( \mathprogramsy{r} \right)\} }}
   \\
      &\qquad  \mathprogramsy{free(x);}   % \onslide<7->{\structure{\{\objsym{emp} * \objsym{emp} * \objsym{emp}\}}}
   \\
      &\quad \mathprogramsy{\}} % \onslide<8->{\structure{\{\objsym{emp}\}}}
   \\
      &\mathprogramsy{\}} \left\{\mathemp\right\}
  \end{align*}
  
  さて、本来であれば、このHoare Triple に対して証明図を
  書くことでプログラムが「正しい」ことを
  証明するのであるが、手間を省くために各行に
  ヒープ領域の状態を表す論理式を書くことでそれに代える。
  
  最初のヒープ領域の状態が$\mathprls{x}{\mathvalnil}$
  で表されるような状態であるとする。

  プログラムの最初の行は$\mathprogramsy{*x}$が
  $\mathprogramsy{NULL}$であるかどうかで
  条件分岐するif文である。

  $\mathprogramsy{*x}$が$\mathprogramsy{NULL}$
  であるとき$\mathprls{x}{\mathvalnil}$定義から
  ヒープ領域は$\left\{\mathemp\right\}$
  という状態である。

  そうでないならば、$\left\{ \mathprogramsy{x} \mathpointer{1} \left\langle y \right\rangle * \mathprls{y}{\mathvalnil} \right\}$という状態である。
  \begin{align*}
   &  \left\{\mathprls{x}{\mathvalnil}\right\}\\
   & \mathprogramsy{dells(*x)} \{  \\
   &\quad \mathprogramsy{if\left(*x = NULL\right)\ return\ 0;}\ \left\{\mathemp\right\}
   \\
     &\quad   \mathprogramsy{else \{}\  
   \left\{ \mathprogramsy{x} \mathpointer{1} \left\langle y \right\rangle * \mathprls{y}{\mathvalnil}  \right\} \\
     &\qquad  \mathprogramsy{n := x.next;}  % \onslide<4->{\structure{\{ \mathprogramsy{x} \mapsto \left(\mathprogramsy{l}, \mathprogramsy{r}\right) * \objsym{tree} \left( \mathprogramsy{l} \right) * \objsym{tree} \left( \mathprogramsy{r} \right)\}}} 
   \\
     &\qquad  \mathprogramsy{dells(n);}  % \onslide<5->{\structure{\{ \mathprogramsy{x} \mapsto \left(\mathprogramsy{l}, \mathprogramsy{r}\right) * \objsym{emp} * \objsym{tree}\left( \mathprogramsy{r} \right)\} }}
   \\
      &\qquad  \mathprogramsy{free(x);}   % \onslide<7->{\structure{\{\objsym{emp} * \objsym{emp} * \objsym{emp}\}}}
   \\
      &\quad \mathprogramsy{\}} % \onslide<8->{\structure{\{\objsym{emp}\}}}
   \\
      &\mathprogramsy{\}} \left\{\mathemp\right\}
  \end{align*}

  $\mathprogramsy{*x}$が$\mathprogramsy{NULL}$
  であるときヒープ領域の状態は
  $\mathemp$になって
  $\mathprogramsy{return}$されるので
  これ以上変化しない。

  $ \mathprogramsy{x} \mathpointer{1} \left\langle y \right\rangle * \mathprls{y}{\mathvalnil}$
  という状態のとき、次の文は$\mathprogramsy{x}$
  の指す先を$\mathprogramsy{n}$と置くというコマンド
  である。つまり、
  $\mathprogramsy{n}=y \land  \mathprogramsy{x} \mathpointer{1} \left\langle y \right\rangle * \mathprls{y}{\mathvalnil}$という状態である。
  これは
  $ \mathprogramsy{x} \mathpointer{1} \left\langle \mathprogramsy{n} \right\rangle * \mathprls{\mathprogramsy{n}}{\mathvalnil}$
  と同値である。
    \begin{align*}
   &  \left\{\mathprls{x}{\mathvalnil}\right\}\\
   & \mathprogramsy{dells(*x)} \{  \\
   &\quad \mathprogramsy{if\left(*x = NULL\right)\ return\ 0;}\ \left\{\mathemp\right\}
   \\
     &\quad   \mathprogramsy{else \{}\  
   \left\{ \mathprogramsy{x} \mathpointer{1} \left\langle y \right\rangle * \mathprls{y}{\mathvalnil}  \right\} \\
     &\qquad  \mathprogramsy{n := x.next;}\  \left\{ \mathprogramsy{x} \mathpointer{1} \left\langle \mathprogramsy{n} \right\rangle * \mathprls{\mathprogramsy{n}}{\mathvalnil}  \right\} \\
     &\qquad  \mathprogramsy{dells(n);}  % \onslide<5->{\structure{\{ \mathprogramsy{x} \mapsto \left(\mathprogramsy{l}, \mathprogramsy{r}\right) * \objsym{emp} * \objsym{tree}\left( \mathprogramsy{r} \right)\} }}
   \\
      &\qquad  \mathprogramsy{free(x);}   % \onslide<7->{\structure{\{\objsym{emp} * \objsym{emp} * \objsym{emp}\}}}
   \\
      &\quad \mathprogramsy{\}} % \onslide<8->{\structure{\{\objsym{emp}\}}}
   \\
      &\mathprogramsy{\}} \left\{\mathemp\right\}
    \end{align*}
  
  次の行は再帰呼び出し$\mathprogramsy{dells(n);}$
  である。
  $\mathprogramsy{dells(*x)}$の仕様から
  （正しく関数が書けていれば）
  $\mathprls{\mathprogramsy{n}}{\mathvalnil}$を
  $\mathemp$にするはずである。
  \begin{align*}
   &  \left\{\mathprls{x}{\mathvalnil}\right\}\\
   & \mathprogramsy{dells(*x)} \{  \\
   &\quad \mathprogramsy{if\left(*x = NULL\right)\ return\ 0;}\ \left\{\mathemp\right\}
   \\
     &\quad   \mathprogramsy{else \{}\  
   \left\{ \mathprogramsy{x} \mathpointer{1} \left\langle y \right\rangle * \mathprls{y}{\mathvalnil}  \right\} \\
     &\qquad  \mathprogramsy{n := x.next;}\  \left\{ \mathprogramsy{x} \mathpointer{1} \left\langle \mathprogramsy{n} \right\rangle * \mathprls{\mathprogramsy{n}}{\mathvalnil}  \right\} \\
     &\qquad  \mathprogramsy{dells(n);}\ \left\{ \mathprogramsy{x} \mathpointer{1} \left\langle \mathprogramsy{n} \right\rangle * \mathemp \right\} \\
      &\qquad  \mathprogramsy{free(x);}   % \onslide<7->{\structure{\{\objsym{emp} * \objsym{emp} * \objsym{emp}\}}}
   \\
      &\quad \mathprogramsy{\}} % \onslide<8->{\structure{\{\objsym{emp}\}}}
   \\
      &\mathprogramsy{\}} \left\{\mathemp\right\}
    \end{align*}

  もし、$\mathprogramsy{dells(*x)}$が正しく
  書けておらず
  $\mathprls{\mathprogramsy{n}}{\mathvalnil}$を
  $\mathemp$に出来ていないとするならばこのままヒープ領域
  の変化を追いかけていけば、異常なことが起こるはずである。

  最後の$\mathprogramsy{free(x);}$によって
  $\mathprogramsy{x} \mathpointer{1} \left\langle \mathprogramsy{n} \right\rangle$
  は$\mathemp$に変わる。
  \begin{align*}
   &  \left\{\mathprls{x}{\mathvalnil}\right\}\\
   & \mathprogramsy{dells(*x)} \{  \\
   &\quad \mathprogramsy{if\left(*x = NULL\right)\ return\ 0;}\ \left\{\mathemp\right\}
   \\
     &\quad   \mathprogramsy{else \{}\  
   \left\{ \mathprogramsy{x} \mathpointer{1} \left\langle y \right\rangle * \mathprls{y}{\mathvalnil}  \right\} \\
     &\qquad  \mathprogramsy{n := x.next;}\  \left\{ \mathprogramsy{x} \mathpointer{1} \left\langle \mathprogramsy{n} \right\rangle * \mathprls{\mathprogramsy{n}}{\mathvalnil}  \right\} \\
     &\qquad  \mathprogramsy{dells(n);}\ \left\{ \mathprogramsy{x} \mathpointer{1} \left\langle \mathprogramsy{n} \right\rangle * \mathemp \right\} \\
      &\qquad  \mathprogramsy{free(x);}\ \left\{ \mathemp \right\} \\
      &\quad \mathprogramsy{\}} \\
      &\mathprogramsy{\}} \left\{\mathemp\right\}
  \end{align*}
  
  以上のことから、if 文の分岐がどちらだったとしても
  最後には$\left\{\mathemp\right\}$になることが
  わかったので$\mathprogramsy{dells(*x)}$が正しく
  書けていることがわかった。
    \begin{align*}
   &  \left\{\mathprls{x}{\mathvalnil}\right\}\\
   & \mathprogramsy{dells(*x)} \{  \\
   &\quad \mathprogramsy{if\left(*x = NULL\right)\ return\ 0;}\ \left\{\mathemp\right\}
   \\
     &\quad   \mathprogramsy{else \{}\  
   \left\{ \mathprogramsy{x} \mathpointer{1} \left\langle y \right\rangle * \mathprls{y}{\mathvalnil}  \right\} \\
     &\qquad  \mathprogramsy{n := x.next;}\  \left\{ \mathprogramsy{x} \mathpointer{1} \left\langle \mathprogramsy{n} \right\rangle * \mathprls{\mathprogramsy{n}}{\mathvalnil}  \right\} \\
     &\qquad  \mathprogramsy{dells(n);}\ \left\{ \mathprogramsy{x} \mathpointer{1} \left\langle \mathprogramsy{n} \right\rangle * \mathemp \right\} \\
      &\qquad  \mathprogramsy{free(x);}\ \left\{ \mathemp \right\} \\
      &\quad \mathprogramsy{\}}\ \left\{ \mathemp \right\} \\
      &\mathprogramsy{\}} \left\{\mathemp\right\}
  \end{align*}

 \begin{thebibliography}{9}
  \bibitem{Brotherston2015} James Brotherston，
	  `` An introduction to separation logic '', 
	  Logic Summer School, ANU, 7 December 2015.
  \bibitem{Reynolds2002} John C. Reynolds, ``Separation Logic: A Logic for Shared Mutable Data Structure'', Proceedings of the 17th Anual IEEE Symposium on Logic in Computer Science, 2002.
 \end{thebibliography} 

\end{document}
